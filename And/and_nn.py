# -*- coding: utf-8 -*-
"""AND nn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_rG6Pw8jXCUzGUDKsqMCU8E6hSOArian
"""

import numpy as np

#AND Gate
x=np.array([[0,0],[0,1],[1,0],[1,1]])
y=np.array([[0],[0],[0],[1]])

input_layer=2
output=1

weight={
'out': 2*np.random.random((input_layer,output))-1
}
biases={
'bo': 2*np.random.random(output)-1
}

def sigmoid(x):
  return 1/(1+np.exp(-x))



def fp(x,weight,bias):
  x=np.matmul(x,weight['out'])+bias['bo']
  x=sigmoid(x)
  return x

def bp(y,pred):
  gra=pred-y
  gra=gra*(pred)*(1-pred)
  changes=np.zeros((input_layer,1),dtype='float')
  for i in range(len(x)):
    for j in range(2):
      changes[j][0]+=gra[i][0]*x[i][j]
  bchange=0
  lr=0.1
  for i in range(len(x)):
      bchange+=gra[i][0]*1
  weight['out']=weight['out']-lr*changes
  biases['bo']=biases['bo']-lr*bchange

for i in range(10000):
  pred=fp(x,weight,biases)
  bp(y,pred)
fp(x,weight,biases)

weight,biases